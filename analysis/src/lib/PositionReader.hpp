/* PositionReader.hpp
 * 
 * A code that reads the dump/position files generated by LAMMPS.
 */

#ifndef POSITIONREADER_HPP
#define POSITIONREADER_HPP

#include <fstream>
#include <vector>
#include <string>

class PositionReader {

private:
  
  int numOfBeads {};
  std::vector<double> boxSize {};
  long timeInc {}, time {};
  std::string positionFile {};
  bool fileOpen {false};
  std::ifstream reader;
  
  // For storing bead position and type data 
  std::vector<std::vector<double> >* position;
  std::vector<std::vector<int> >* boundaryCount;
  std::vector<int>* type;

  void initData();
  void deleteData();

public:
  
  // Destructor
  ~PositionReader();
  
  // Load a new position file
  bool open(std::string positionFile, int numOfBeads, 
	    double lx, double ly, double lz, int timeInc);
  void close();

  // Return the position of a bead
  double getPosition(int beadIndex, int comp) const;
  double getUnwrappedPosition(int beadIndex, int comp) const;

  // Return the type of a bead
  int getType(int beadIndex) const;

  // Retrieve the bead position data in the next time frame
  // Return false if there is no next frame
  bool nextFrame();
  
  // Get the time associated with the frame
  long getTime() const;

  // Check if there is a file open
  bool isOpen();
  
};

#endif
